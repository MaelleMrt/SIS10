/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package CIC;

import Connexion.ExempleJdbc;
import PageConnexion.InterfaceConnexion;
import Tri.Tri;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;

/**
 * correspond à la page permettant d'ajouter des participants à une étude qu'on est en train de créer
 * @author clara
 */
public class CicAjouterParticipant extends javax.swing.JFrame {

    /**
     * la liste des participants qui va permettre de remplir le tableau
     */
    private ArrayList<Participant> listeParticipants = new ArrayList<Participant>();
    /**
     * la liste des participants qui va contenir les participants qu'on veut ajouter à l'étude
     */
    private ArrayList<Participant> nouveaux = new ArrayList<Participant>();
    /**
     * la liste des participants qui participent déjà à l'étude
     */
    private ArrayList<Participant> ancienneListe = new ArrayList<Participant>();
    /**
     * le nom de l'étude
     */
    private String nom;
    /**
     * la date de démarrage de l'étude
     */
    private String date;
    /**
     * la durée de l'étude
     */
    private int duree;
    /**
     * le PH qui est connecté
     */
    private Cic cic;
    /**
     * connexion à la base de données
     */
    private Statement s;

    /**
     * Constructeur CicAjouterParticipant
     * Creates new form CicAjouterParticipant
     * initialise les éléments de la fenêtre
     * remplit le tableau la liste des participants qui ne participent pas encore à cette étude
     * @param ancienneListe la liste des participants qui participent déjà à l'étude
     * @param listeParticipants la liste des participants qui va permettre de remplir le tableau
     * @param nom nom de l'étude
     * @param date date de démarrage de l'étude
     * @param duree durée de l'étude
     * @param cic PH
     * @param s connexion à la base de données
     * @throws SQLException gestion des exceptions
     * 
     */
    public CicAjouterParticipant(ArrayList<Participant> ancienneListe, ArrayList<Participant> listeParticipants, String nom, String date, int duree,Cic cic,Statement s) throws SQLException {
        this.s = s;
        this.ancienneListe = ancienneListe;
        this.listeParticipants = listeParticipants;
        this.nom = nom;
        this.date = date;
        this.duree = duree;
        this.cic = cic;
        initComponents();
        remplirTableau();
        erreur.setVisible(false);
        this.setLocationRelativeTo(null);
        this.setVisible(true);
    }

    /**
     * remplit le tableau avec la liste listeParticipants
     * on supprime d'abord de la liste de tous les participants, ceux qui participent déjà à cette étude (qui sont dans la liste ancienneListe)
     * 
     * @throws SQLException gestion des exceptions
     */
    public void remplirTableau() throws SQLException {
        ArrayList<Participant> supp = new ArrayList<>();
        DefaultTableModel model = new DefaultTableModel();
        int i = 0;
        for (Participant p : listeParticipants) {
            int j = 0;
            while (j < ancienneListe.size() && !p.egal(ancienneListe.get(j))) {
                j++;
            }
            if (j < ancienneListe.size()) {
                supp.add(p);
            }
        }
        // on supprime de la liste les participants qui participent déjà à l'étude
        for (Participant p1 : supp) {
            listeParticipants.remove(p1);
        }
        // on remplit le tableau
        for (Participant part : listeParticipants) {
            Vector<Object> v = new Vector<Object>();
            v.add(part.getNomU());
            v.add(part.getPrenom());
            v.add(part.getDateN());
            v.add(part.getType());
            model.setColumnIdentifiers(new String[]{"Nom", "Prénom", "Date de naissance", "Type"});
            model.insertRow(i, v);
            i++;
        }

        participants.setModel(model);
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        deconnexion = new javax.swing.JButton();
        utilisateur = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        participants = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        rechercherTextField = new javax.swing.JTextField();
        erreur = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        deconnexion.setText("Déconnexion");
        deconnexion.setToolTipText("");
        deconnexion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deconnexionActionPerformed(evt);
            }
        });

        utilisateur.setText(cic.getPrenom()+" "+cic.getNom());

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Logo/AtlanTISpng.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(utilisateur)
                .addGap(26, 26, 26)
                .addComponent(deconnexion)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(utilisateur)
                    .addComponent(deconnexion))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton1.setText("Annuler");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        participants.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nom", "Prénom", "Date de naissance", "Patient/Volontaire sain"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(participants);

        jButton2.setText("Recherche par critères");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setText("Ajouter");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setText("Ajouter des participants");

        rechercherTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rechercherTextFieldActionPerformed(evt);
            }
        });
        rechercherTextField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                rechercherTextFieldPropertyChange(evt);
            }
        });

        erreur.setFont(new java.awt.Font("Tahoma", 3, 16)); // NOI18N
        erreur.setForeground(new java.awt.Color(255, 0, 0));
        erreur.setText("Veuillez sélectionner un/des participant(s)");

        jButton3.setText("Nouveau Participant");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Trier par...", "Nom", "Prénom", "Date de naissance", "Type" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 989, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(erreur, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(rechercherTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(3, 3, 3)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rechercherTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addGap(129, 129, 129)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton4)
                    .addComponent(erreur))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rechercherTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rechercherTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rechercherTextFieldActionPerformed

    /**
     * renvoie à la page où l'on peut faire une recherche selon différents critères pour trouver des participants
     * @param evt 
     * @see CicRechercherParticipant
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.setVisible(false);
        CicRechercherParticipant r = new CicRechercherParticipant(ancienneListe, listeParticipants, nom, date, duree,cic,s);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * annuler l'ajout de participant : renvoie à la page ajouter une étude clinique mais n'a pas ajouté de participant
     * @param evt 
     * @see CicAjouterEtude
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.setVisible(false);
        CicAjouterEtude a = new CicAjouterEtude(ancienneListe, nouveaux, nom, date, duree,cic,s);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * Ajouter les participants sélectionnés à l'étude qu'on est en train de créer
     * @param evt 
     * @see CicAjouterEtude
     */
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        //Pour chaque ligne sélectionnée, on crée un nouveau participant qu'on ajoute à la liste nouveaux 
        for (int i = 0; i < participants.getRowCount(); i++) {
            if (participants.isRowSelected(i)) {
                try {
                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                    String da = String.valueOf(participants.getValueAt(i, 2));
                    java.util.Date d = dateFormat.parse(da);
                    Date date = new Date(d.getTime());
                    Participant p = new Participant(String.valueOf(participants.getValueAt(i, 0)), String.valueOf(participants.getValueAt(i, 1)), date, String.valueOf(participants.getValueAt(i, 3)));
                    nouveaux.add(p);
                } catch (ParseException ex) {
                    Logger.getLogger(CicAjouterParticipant.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        // si la liste nouveaux est vide, càd si on a pas ajouté de participants, message d'erreur apparait
        if (nouveaux.isEmpty()) {
            erreur.setVisible(true);
        } else {
            erreur.setVisible(false);
            String s = "Le(s) participant(s) ";
            for (Participant p : nouveaux) {
                s += p.getPrenom() + " " + p.getNomU() + ", ";
            }
            // Message pop-up pour confirmer l'ajout des participants
            JOptionPane.showMessageDialog(null, s + "a/ont bien été ajouté(s)", "Message", JOptionPane.WARNING_MESSAGE);
           
            this.setVisible(false);
            CicAjouterEtude a = new CicAjouterEtude(ancienneListe, nouveaux, nom, date, duree,cic,this.s);
        }

    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * permet de faire une recherche par le nom du participant
     * affiche la liste des participants ayant un nom contenant le texte qu'on a entré dans la barre de recherche
     * @param evt 
     */
    private void rechercherTextFieldPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_rechercherTextFieldPropertyChange
        rechercherTextField.getDocument().addDocumentListener(new DocumentListener() {
            public void changedUpdate(DocumentEvent e) {
                afficherList();
            }

            public void removeUpdate(DocumentEvent e) {
                afficherList();
            }

            public void insertUpdate(DocumentEvent e) {
                afficherList();
            }

            public void afficherList() {
                DefaultTableModel model = new DefaultTableModel();
                String texte = rechercherTextField.getText();
                int i = 0;
                for (Participant p : listeParticipants) {
                    if (p.getNomU().toUpperCase().contains(texte.toUpperCase())) {
                        Vector<Object> v = new Vector<Object>();
                        v.add(p.getNomU());
                        v.add(p.getPrenom());
                        v.add(p.getDateN());
                        v.add(p.getType());
                        model.setColumnIdentifiers(new String[]{"Nom de l'étude", "Praticien hospitalier porteur", "Date de démarrage", "Durée (semaines)"});
                        model.insertRow(i, v);
                        i++;
                    }
                }
                participants.setModel(model);
            }

        });
    }//GEN-LAST:event_rechercherTextFieldPropertyChange
    /**
     * permet de se déconnecter
     * ferme la page actuelle et ouvre la page de connexion
     * @param evt 
     */
    private void deconnexionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deconnexionActionPerformed
        this.setVisible(false);
        InterfaceConnexion i = new InterfaceConnexion();
    }//GEN-LAST:event_deconnexionActionPerformed

    /**
     * ferme la page actuelle et ouvre la page sur laquelle on peut créer un nouveau participant qui n'est pas encore dans la base de données
     * @param evt 
     * @see NouveauParticipant
     */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            NouveauParticipant n = new NouveauParticipant(ancienneListe,listeParticipants,nom,date,duree,cic,s);
        } catch (ParseException ex) {
            Logger.getLogger(CicAjouterParticipant.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.setVisible(false);
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * permet de trier les participants par nom, prénom, date de naissance ou type
     * @param evt 
     */
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        if (jComboBox1.getSelectedItem().equals("Nom")) {
            listeParticipants = new Tri().trierParticipantsParNom(listeParticipants);
        }
        else if (jComboBox1.getSelectedItem().equals("Prénom")) {
            listeParticipants = new Tri().trierParticipantsParPrenom(listeParticipants);
        }
        else if (jComboBox1.getSelectedItem().equals("Date de naissance")) {
            listeParticipants = new Tri().trierParticipantsParDates(listeParticipants);
        }
        else if (jComboBox1.getSelectedItem().equals("Type")) {
            listeParticipants = new Tri().trierParticipantsParType(listeParticipants);
        }
        // on remplit le tableau avec la liste triée
        DefaultTableModel model = new DefaultTableModel();
        int i = 0;
        for (Participant p : listeParticipants) {
            Vector<Object> v = new Vector<Object>();
            v.add(p.getNomU());
            v.add(p.getPrenom());
            v.add(p.getDateN());
            v.add(p.getType());
            model.setColumnIdentifiers(new String[]{"Nom", "Prénom", "Date de naissance", "Type"});
            model.insertRow(i, v);
            i++;
        }
        participants.setModel(model);
    }//GEN-LAST:event_jComboBox1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CicAjouterParticipant.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CicAjouterParticipant.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CicAjouterParticipant.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CicAjouterParticipant.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                new CicAjouterParticipant().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deconnexion;
    private javax.swing.JLabel erreur;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable participants;
    private javax.swing.JTextField rechercherTextField;
    private javax.swing.JLabel utilisateur;
    // End of variables declaration//GEN-END:variables
}
